{"version":3,"file":"static/js/260.51c20d42.chunk.js","mappings":"iRAKA,EALqB,CACjBA,MAAO,GACPC,SAAU,ICed,EAjBe,CACXD,MAAO,CACHE,KAAM,QACNC,KAAM,QACNC,UAAU,EACVC,MAAO,SACPC,YAAa,cAEjBL,SAAU,CACNC,KAAM,WACNC,KAAM,WACNC,UAAU,EACVC,MAAO,YACPC,YAAa,kBCZrB,EAAwD,wB,UCkDxD,EAtCkB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,WAAS,UAAKC,IAAxC,eAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBX,EAAR,EAAQA,KAAMY,EAAd,EAAcA,MACdJ,GAAS,SAAAK,GACP,OAAO,kBAAKA,GAAZ,cAAwBb,EAAOY,GAChC,GACF,EAOOf,EAAoBU,EAApBV,MAAOC,EAAaS,EAAbT,SAEf,OACE,+BACE,kBAAMM,SATW,SAAAM,GACnBA,EAAEI,iBACFV,GAAS,UAAKG,IACdC,GAAS,UAAKF,GACf,EAKiCS,UAAWC,EAAzC,WACE,SAACC,EAAA,GAAD,QACEL,MAAOf,EACPqB,aAAcT,GACVU,EAAAA,SAEN,SAACF,EAAA,GAAD,QACEL,MAAOd,EACPoB,aAAcT,GACVU,EAAAA,YAEN,SAAC,IAAD,CAAKpB,KAAK,SAASqB,SAAS,SAACC,EAAA,EAAD,IAA5B,uBAMP,EC/BD,EAdkB,WACd,IAAMC,GAAWC,EAAAA,EAAAA,MAMjB,OACI,+BACI,SAAC,EAAD,CAAWnB,SANC,SAAAoB,GAChBF,GAASG,EAAAA,EAAAA,IAAMD,GAClB,KAOJ,C,kGCXKE,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAe,kBAAgB,CACjDE,MADiC,EAAGC,MACvBC,QAAQC,gBAAgBC,EAAAA,EAAAA,MACrCC,gBAAiBD,EAAAA,EAAAA,KAEjB,UAAW,CACTC,gBAAiBD,EAAAA,EAAAA,MALc,IAStBE,EAAM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAyC,IAA/BrC,KAAAA,OAA+B,MAAxB,SAAwB,EAAdqB,EAAc,EAAdA,QAC/C,OACE,SAACM,EAAD,CAAaW,QAAQ,YAAYtC,KAAMA,EAAMqB,QAASA,EAAtD,SACGgB,GAGN,C,yFCnBD,EAA0B,2BAA1B,EAA6D,yBAA7D,EAA8F,yB,qCCiB9F,EAdkB,SAAC,GAAuC,IAArClC,EAAoC,EAApCA,MAAOgB,EAA6B,EAA7BA,aAAiBoB,GAAY,YAC/CC,GAAKC,EAAAA,EAAAA,UAAQ,kBCcH,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACN,EAAIO,GAWvD,OAREP,IAFFO,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDdSG,EAAN,GAAgB,IAEnC,OACI,iBAAKlC,UAAWC,EAAhB,WACI,kBAAOkC,QAASX,EAAIxB,UAAWC,EAA/B,SACKd,KAEL,kCAAOqC,GAAIA,EAAIY,SAAUjC,GAAkBoB,GAA3C,IAAkDvB,UAAWC,OAIxE,C,0BEdGoC,EAAyBC,EAAQ,MAIrCC,EAAQ,OAAU,EAClB,IAAIC,EAAiBH,EAAuBC,EAAQ,OAChDG,EAAcH,EAAQ,MACtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,kHACD,SACJN,EAAQ,EAAUG,C","sources":["modules/LoginForm/initialState.js","modules/LoginForm/fields.js","webpack://react-homework-template/./src/modules/LoginForm/LoginForm.module.css?2400","modules/LoginForm/LoginForm.jsx","pages/LoginPage.jsx","shared/components/Button/Button.jsx","webpack://react-homework-template/./src/shared/components/TextField/TextField.module.css?2d5d","shared/components/TextField/TextField.jsx","../node_modules/nanoid/index.browser.js","../node_modules/@mui/icons-material/Login.js"],"sourcesContent":["const initialState = {\n    email: '',\n    password: '',\n};\n\nexport default initialState;","const fields = {\n    email: {\n        type: 'email',\n        name: 'email',\n        required: true,\n        label: 'Email:',\n        placeholder: 'User email',\n    },\n    password: {\n        type: 'password',\n        name: 'password',\n        required: true,\n        label: 'Password:',\n        placeholder: 'User password',\n    }\n};\n\nexport default fields;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"LoginForm_title__5Xj78\",\"form\":\"LoginForm_form__pVIZl\",\"button\":\"LoginForm_button__+RNey\"};","import * as React from 'react';\nimport { useState } from 'react';\n\nimport { Btn } from 'shared/components/Button/Button';\nimport LoginIcon from '@mui/icons-material/Login';\n\nimport TextField from 'shared/components/TextField/TextField';\n\nimport initialState from './initialState';\nimport fields from './fields';\n\nimport css from './LoginForm.module.css';\n\nconst LoginForm = ({ onSubmit }) => {\n  const [state, setState] = useState({ ...initialState });\n\n  const handleSearch = e => {\n    const { name, value } = e.target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ ...state });\n    setState({ ...initialState });\n  };\n  const { email, password } = state;\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className={css.form}>\n        <TextField\n          value={email}\n          handleChange={handleSearch}\n          {...fields.email}\n        />\n        <TextField\n          value={password}\n          handleChange={handleSearch}\n          {...fields.password}\n        />\n        <Btn type=\"submit\" endIcon={<LoginIcon />}>\n          Login\n        </Btn>\n      </form>\n    </>\n  );\n};\n\nexport default LoginForm;","import { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/auth-operations';\nimport LoginForm from 'modules/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n    const dispatch = useDispatch();\n\n    const handleLogin = data => {\n        dispatch(login(data))\n    };\n\n    return (\n        <>\n            <LoginForm onSubmit={handleLogin} />\n        </>\n    )\n};\n\nexport default LoginPage;","import { Button } from '@mui/material';\n\nimport { blue } from '@mui/material/colors';\nimport { styled } from '@mui/material/styles';\n\nconst ColorButton = styled(Button)(({ theme }) => ({\n  color: theme.palette.getContrastText(blue[200]),\n  backgroundColor: blue[200],\n\n  '&:hover': {\n    backgroundColor: blue[300],\n  },\n}));\n\nexport const Btn = ({ children, type = 'submit', endIcon }) => {\n  return (\n    <ColorButton variant=\"contained\" type={type} endIcon={endIcon}>\n      {children}\n    </ColorButton>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"TextField_wrapper__OQN5w\",\"label\":\"TextField_label__PQj1k\",\"input\":\"TextField_input__Oi20a\"};","import { useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './TextField.module.css';\n\nconst TextField = ({ label, handleChange, ...props }) => {\n    const id = useMemo(() => nanoid(), []);\n\n    return (\n        <div className={css.wrapper}>\n            <label htmlFor={id} className={css.label}>\n                {label}\n            </label>\n            <input id={id} onChange={handleChange} {...props} className={css.input} />\n\n        </div>\n    )\n};\n\nexport default TextField;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M11 7 9.6 8.4l2.6 2.6H2v2h10.2l-2.6 2.6L11 17l5-5-5-5zm9 12h-8v2h8c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-8v2h8v14z\"\n}), 'Login');\nexports.default = _default;"],"names":["email","password","type","name","required","label","placeholder","onSubmit","useState","initialState","state","setState","handleSearch","e","target","value","prevState","preventDefault","className","css","TextField","handleChange","fields","endIcon","Login","dispatch","useDispatch","data","login","ColorButton","styled","Button","color","theme","palette","getContrastText","blue","backgroundColor","Btn","children","variant","props","id","useMemo","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","onChange","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}