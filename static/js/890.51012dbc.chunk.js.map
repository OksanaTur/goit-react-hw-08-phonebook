{"version":3,"file":"static/js/890.51012dbc.chunk.js","mappings":"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","sources":["modules/PhoneBook/ContactForm/initialState.js","webpack://react-homework-template/./src/modules/PhoneBook/ContactForm/ContactForm.module.css?c94f","modules/PhoneBook/ContactForm/ContactForm.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/filter/filter-selectors.js","redux/contacts/contacts-selectors.js","webpack://react-homework-template/./src/modules/PhoneBook/ContactsList/ContactsList.module.css?478b","modules/PhoneBook/ContactsList/ContactsList.jsx","webpack://react-homework-template/./src/modules/PhoneBook/Filter/Filter.module.css?d1bb","modules/PhoneBook/Filter/Filter.jsx","webpack://react-homework-template/./src/modules/PhoneBook/PhoneBook.module.css?df9e","modules/PhoneBook/PhoneBook.jsx","pages/ContactsPage.jsx"],"sourcesContent":["const initialState = {\n    name: '',\n    number: '',\n};\n\nexport default initialState;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__Z4FtV\",\"title\":\"ContactForm_title__oju0S\",\"input\":\"ContactForm_input__LcR2n\",\"button\":\"ContactForm_button__1TN1r\"};","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchAllContacts, fetchAddContact } from 'redux/contacts/contacts-operations';\nimport initialState from './initialState';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n    const [state, setState] = useState({ ...initialState });\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchAllContacts());\n    }, [dispatch]);\n\n    const handleSearch = e => {\n        const { name, value } = e.target;\n        setState(prevState => {\n            return { ...prevState, [name]: value };\n        })\n    };\n\n    const handleAddContact = e => {\n        e.preventDefault();\n        dispatch(fetchAddContact({ name, number }));\n        setState({ ...initialState })\n    };\n\n    const { name, number } = state;\n\n    return (\n        <form className={css.form} onSubmit={handleAddContact}>\n            <label className={css.title}>\n                Name\n                <input\n                    type='text'\n                    name='name'\n                    value={name}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    onChange={handleSearch}\n                    className={css.input} />\n                \n            </label>\n            <label className={css.title}>\n                Number\n                <input\n                    type='tel'\n                    name='number'\n                    value={number}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    onChange={handleSearch}\n                    className={css.input} />\n            </label>\n            <button type='submit' className={css.button}>\n                Add contact\n            </button>\n        </form>\n    )\n};\n\nexport default ContactForm;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","export const getFilter = ({ filter }) => filter;","import { createSelector } from '@reduxjs/toolkit';\nimport { getFilter } from 'redux/filter/filter-selectors';\n\nexport const getAllContacts = ({ contacts }) => contacts.items;\n\nexport const getFilteredContacts = createSelector(\n    [getFilter, getAllContacts],\n    (filter, contacts) => {\n        const normalizedFilter = filter.toLowerCase();\n        const result = contacts.filter(({ name }) => {\n            return name.toLowerCase().includes(normalizedFilter)\n        });\n        return result;\n    }\n);","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__8JvuZ\",\"item\":\"ContactsList_item__vCJts\",\"contact\":\"ContactsList_contact__Z7VvL\",\"number\":\"ContactsList_number__F75HI\",\"button\":\"ContactsList_button__oiqXr\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\nimport { fetchDeleteContact } from 'redux/contacts/contacts-operations';\nimport css from './ContactsList.module.css';\n\nconst ContactsList = () => {\n    const filteredContacts = useSelector(getFilteredContacts);\n    const dispatch = useDispatch();\n\n    const handleDeleteContact = id => {\n        dispatch(fetchDeleteContact(id));\n        toast.error('Contact deleted')\n    };\n\n    const elements = filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className={css.item}>\n            <p className={css.contact}>\n                {name}:\n                <span className={css.number}>{number}</span>\n            </p>\n            <button\n                type='button'\n                className={css.button}\n                onClick={() => handleDeleteContact(id)}>\n                Delete\n            </button>\n        </li>\n    ));\n    return <ul className={css.list}>{elements}</ul>\n};\n\nexport default ContactsList;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Filter_title__aVV9p\",\"input\":\"Filter_input__WjkHa\"};","import { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { getFilter } from 'redux/filter/filter-selectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const handleFilter = ({ target }) => {\n        dispatch(setFilter(target.value));\n    };\n\n    return (\n        <label className={css.title}>\n            Find contact by name\n            <input\n                type='text'\n                className={css.input}\n                value={filter}\n                onChange={handleFilter} />\n        </label>\n    )\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"PhoneBook_title__r6uAi\",\"text\":\"PhoneBook_text__UffSv\"};","import { useSelector } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Loader from 'shared/components/Loader/Loader';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactsList from './ContactsList/ContactsList';\nimport Filter from './Filter/Filter';\nimport { getFilteredContacts } from 'redux/contacts/contacts-selectors';\nimport css from './PhoneBook.module.css';\n\nexport const PhoneBook = () => {\n    const isContacts = Boolean(useSelector(getFilteredContacts).length);\n    const isLoading = useSelector(state => state.contacts.isLoading);\n\n    return (\n        <>\n            <h2>PhoneBook</h2>\n            <ContactForm />\n            <h2 className={css.title}>Contacts</h2>\n            <Filter />\n            {isLoading && <Loader />}\n            {isContacts && <ContactsList />}\n            {!isContacts && !isLoading && (\n                <p className={css.text}>No contacts in the list</p>\n            )}\n            <ToastContainer autoClose={1500} position='top-rigth' />\n        </>\n    )\n};","import { PhoneBook } from \"modules/PhoneBook/PhoneBook\";\n\nconst ContactsPage = () => {\n    return <PhoneBook />\n};\n\nexport default ContactsPage;"],"names":["name","number","useState","initialState","state","setState","dispatch","useDispatch","useEffect","fetchAllContacts","handleSearch","e","target","value","prevState","className","css","onSubmit","preventDefault","fetchAddContact","type","pattern","title","required","onChange","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getFilter","filter","getFilteredContacts","contacts","items","normalizedFilter","toLowerCase","includes","filteredContacts","useSelector","elements","id","onClick","fetchDeleteContact","toast","handleDeleteContact","setFilter","PhoneBook","isContacts","Boolean","isLoading","Loader","autoClose","position"],"sourceRoot":""}